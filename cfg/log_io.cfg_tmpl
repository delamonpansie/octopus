#######################################################################
#	LogIO
#

# Snapshot directory (where snapshots get saved/read)
snap_dir=".", ro

# WAL directory (where WAL get saved/read)
wal_dir=".", ro

# do not write snapshot faster then snap_io_rate_limit MBytes/sec
snap_io_rate_limit=0.0, ro

# Write no more rows in WAL
rows_per_wal=500000, ro

# fsync WAL delay, only issue fsync if last fsync was wal_fsync_delay seconds ago
# -1 : no fsync
# 0 : fsycn every record
# WARNING: actually, several last requests may stall for much longer
wal_fsync_delay=0.0, ro

# completly ignore run_crc
ignore_run_crc=0, ro

# how often nop heartbeat is submited to wal
nop_hb_delay=60.0, ro

# size of WAL writer requests buffer
# WAL is disabled if wal_writer_inbox_size is equal to 0
wal_writer_inbox_size=128, ro

# Local hot standby (if enabled server will run in locale hot standby mode
# continuously fetching WAL records from shared local directory
local_hot_standby=0, ro
# delay in fractional seconds between successive re-readings of wal_dir
wal_dir_rescan_delay=5.0, ro


# Remote hot standby (if wal_feeder_addr configured server will run in
# hot standby mode continuously fetching WAL records from it
# setting env var SYNC_DUMP=1 will force replica do initial dump without forking.
wal_feeder_addr=NULL, rw
wal_feeder_primary_port=0, rw
wal_feeder_filter=NULL, rw
wal_feeder_keepalive_timeout=120.0, rw
wal_feeder_filter_type=NULL, rw
wal_feeder_filter_arg=NULL, rw

# if enabled, server will panic on LSN gap
# beware: very old code may produce xlog with gaps
panic_on_lsn_gap = 1, ro
panic_on_scn_gap = 1, ro

# require than scn === lsn
sync_scn_with_lsn = 1, ro

# call fadvise_dont_need on snapshot writes
snap_fadvise_dont_need = 1, rw
